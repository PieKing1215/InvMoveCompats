plugins {
    id 'com.github.johnrengelman.shadow'
}

repositories {
    mavenLocal()
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${get("fabric_api")}"

    modImplementation "com.terraformersmc:modmenu:${get("modmenu_version")}"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${get("cloth_version")}") {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }

    modApi "me.pieking1215.invmove.fabric:InvMove:${rootProject.invmove_version}"

    common(project(path: ":common:$stonecutter.current.project", configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ":common:$stonecutter.current.project", configuration: 'transformProductionFabric')
}

processResources {
    def props = [
            "id"              : rootProject.id,
            "name"            : rootProject.display_name,
            "description"     : rootProject.description,
            "author"          : rootProject.author,
            "license"         : rootProject.license,
            "repo"            : rootProject.repo,
            "version"         : project.version,
            "minecraftVersion": stonecutter.current.project,
            "minecraft_min"   : get("minecraft_min"),
            "fabricVersion"   : get("fabric_api"),
            // NOTE: dash on fabric
            "cloth_id"        : stonecutter.eval(stonecutter.current.project, ">=1.18") ? "cloth-config" : "cloth-config2",
            "cloth_min"       : get("cloth_min"),
            "invmove_version" : rootProject.invmove_version,
            "rei_min"         : getOr("rei_min", "0"),
            "emi_min"         : getOr("emi_min", "0"),
    ]

    inputs.properties props
    filesMatching("fabric.mod.json") { expand props }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}