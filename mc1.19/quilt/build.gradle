plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    accessWidenerPath = project("${parent.path}:common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilt_fabric_api_version}"

    modImplementation("com.terraformersmc:modmenu:${modmenu_version}") {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }

    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_version}") {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("me.pieking1215.invmove.19:InvMove-quilt:0.8.1")

    common(project(path: "${parent.path}:common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: "${parent.path}:common", configuration: "transformProductionQuilt")) { transitive false }

    common(project(path: "${parent.path}:fabric-like", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: "${parent.path}:fabric-like", configuration: "transformProductionQuilt")) { transitive false }
}

processResources {
    inputs.property "group", maven_group
    inputs.property "version", project.version
    inputs.property "crossversionRefmap", "${archives_base_name}-${project.parent.name}_common-refmap.json"

    filesMatching("quilt.mod.json") {
        expand "group": maven_group,
                "version": project.version,
                "description": mod_description,
                "repo": mod_repo
    }

    filesMatching("invmovecompats.mixins.json") {
        expand "crossversionRefmap": "${archives_base_name}-${project.parent.name}_common-refmap.json"
    }

    from project("${parent.path}:common").sourceSets.main.resources
    from project("${parent.path}:fabric-like").sourceSets.main.resources
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project("${parent.path}:common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenQuilt(MavenPublication) {
            artifactId = archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
